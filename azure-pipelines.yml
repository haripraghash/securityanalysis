# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger:
  - "*"

variables:
  - group: azuresubscription
  - name: buildConfiguration
    value: 'Release'
  - name:  dotnetSdkVersion
    value: '3.1.101'

stages:
- stage: dev
  displayName: Dev
  variables:
    ENV: "dev"
    REGION: "eastus"
  pool:
   vmImage: 'windows-latest'
  jobs:
  - job: provisionazureinfrastructure
    displayName: "Provision Azure Infrastructure"
    
    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonar-haripraghash'
        organization: 'haripraghashdevops'
        scannerMode: 'MSBuild'
        projectKey: 'haripraghashdevops'
        projectName: 'securityanalysis'
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          sonar.exclusions=**/*.bin
          sonar.branch.name=$(Build.SourceBranchName)
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        packageType: sdk
        version: $(dotnetSdkVersion)
    # - task: DotNetCoreCLI@2
    #   displayName: 'Restore'
    #   inputs:
    #       command: restore
    # - task: AzurePowerShell@4
    #   name: deployazureinfra
    #   displayName: "Run powershell script to provision azure infra"
    #   inputs:
    #     azureSubscription: "securityanalysis"
    #     azurePowerShellVersion: LatestVersion
    #     scriptPath: ./acme.product.api.provisioning/deploy-productapi.ps1 
    #     errorActionPreference: stop
    #     failOnStandardError: true
    #     scriptArguments: -AadAdmin $(aadAdmin) -AadPassword (ConvertTo-SecureString $(aadPassword) -AsPlainText -Force) -ResourceGroupLocation $(REGION)  -environment $(ENV)
    - task: VSBuild@1
      displayName: Build Solution
      inputs:
        solution: '**\acme.product.web.api.sln' 
        vsVersion: 'latest'
        msbuildArgs: '/t:Clean,Build /p:SkipInvalidConfigurations=true"'          
        configuration: $(BuildConfiguration)
        restoreNugetPackages: true
    
    - task: SonarCloudAnalyze@1 
      displayName: 'Run Code Analysis on SonarCloud' 

    - task: SonarCloudPublish@1 
      displayName: 'Publish Quality Gate Result on SonarCloud'

    # - task: SqlAzureDacpacDeployment@1
    #   displayName: "Deploy Azure Sql Database Schema"
    #   condition: 
    #   inputs:
    #     azureSubscription: "securityanalysis"
    #     serverName: "$(SqlServerName).database.windows.net"
    #     databaseName: $(SqlServerDbName)
    #     sqlUsername: $(SqlServerAppAdminLogin)
    #     sqlPassword: $(SqlServerAppAdminLoginPassword)
    #     deploymentAction: 'Publish'
    #     dacpacFile: .\acme.product.database\bin\$(buildConfiguration)\acme.product.database.dacpac
  # - job: deployazuresqlschema
  #   displayName: "Deploy Azure Sql Schema"
  #   dependsOn: provisionazureinfrastructure
  #   condition: succeeded()
  #   variables:
  #     sqlServerName: $[ dependencies.provisionazureinfrastructure.outputs['deployazureinfra.SqlServerName'] ]
  #     sqlServerDbName: $[ dependencies.provisionazureinfrastructure.outputs['deployazureinfra.SqlServerDbName'] ]
  #     sqlServerUserName: $[ dependencies.provisionazureinfrastructure.outputs['deployazureinfra.SqlServerAppAdminLogin'] ]
  #     sqlServerPassword: $[ dependencies.provisionazureinfrastructure.outputs['deployazureinfra.SqlServerAppAdminLoginPassword'] ]
  #   steps:
  #   - task: DotNetCoreInstaller@0
  #     displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  #     inputs:
  #       packageType: sdk
  #       version: $(dotnetSdkVersion)
  #   - task: DotNetCoreCLI@2
  #     displayName: 'Restore'
  #     inputs:
  #        command: restore

  #   - task: VSBuild@1
  #     displayName: Build Solution
  #     inputs:
  #       solution: '**\acme.product.database.csproj' 
  #       vsVersion: 'latest'
  #       msbuildArgs: '/t:Clean,Build /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)\webapps"'          
  #       configuration: $(BuildConfiguration)

  #   - task: SqlAzureDacpacDeployment@1
  #     displayName: "Deploy Azure Sql Database Schema"
  #     condition: 
  #     inputs:
  #       azureSubscription: "securityanalysis"
  #       serverName: "$(sqlServerName).database.windows.net"
  #       databaseName: $(sqlServerDbName)
  #       sqlUsername: $(sqlServerUserName)
  #       sqlPassword: $(sqlServerPassword)
  #       deploymentAction: 'Publish'
  #       dacpacFile: .\acme.product.database\bin\$(buildConfiguration)\acme.product.database.dacpac
  # - job: buildandanalyzesource
  #   displayName: 'Build and Analyze source'
  #   pool:
  #     vmImage: ubuntu-latest
  #   steps:
  #   - task: SonarCloudPrepare@1
  #     inputs:
  #       SonarCloud: 'sonar-haripraghash'
  #       organization: 'haripraghashdevops'
  #       scannerMode: 'MSBuild'
  #       projectKey: 'haripraghashdevops'
  #       projectName: 'securityanalysis'
  #       extraProperties: |
  #         # Additional properties that will be passed to the scanner, 
  #         # Put one key=value per line, example:
  #         sonar.exclusions=**/*.bin
  #         sonar.branch.name=$(Build.SourceBranchName)
  #         - task: DotNetCoreInstaller@0
  #         displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  #         inputs:
  #           packageType: sdk
  #           version: $(dotnetSdkVersion)
  #   - task: DotNetCoreCLI@2
  #     displayName: 'Restore'
  #     inputs:
  #       command: restore
    
  #   - task: VSBuild@1
  #     displayName: Build Solution
  #     inputs:
  #       solution: '**\*.sln' 
  #       vsVersion: 'latest'
  #       msbuildArgs: '/t:Clean,Build /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)\webapps"'          
  #       configuration: $(BuildConfiguration)

  
  


# steps:
# - task: DotNetCoreCLI@2
#   displayName: Restore nuget
#   inputs:
#     command: 'restore'
#     projects: '**/*.csproj'

# - task: VSBuild@1
#   displayName: Build Solution
#   inputs:
#     solution: '**\*.sln' 
#     #vsVersion: 'latest' # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 11.0
#     msbuildArgs: '/t:Clean,Build /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)\webapps"'
#     #platform: # Optional
#     configuration: $(BuildConfiguration)
#     #clean: false # Optional
#     #maximumCpuCount: false # Optional
#     #restoreNugetPackages: false # Optional
#     #msbuildArchitecture: 'x86' # Optional. Options: x86, x64
#     #logProjectEvents: true # Optional
#     #createLogFile: false # Optional
#     #logFileVerbosity: 'normal' # Optional. Options: quiet, minimal, normal, detailed, diagnostic

# # - task: DotNetCoreCLI@2
# #   displayName: 'dotnet publish $(buildConfiguration)'
# #   inputs:
# #     command: publish
# #     publishWebProjects: false
# #     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\webapps'
# #     zipAfterPublish: True
# - task: CopyFiles@2
#   displayName: Copy dacpac to artifacts
#   inputs:
#     SourceFolder: acme.product.database
#     Contents: |
#      bin\$(BuildConfiguration)\acme.product.database.dacpac
#     TargetFolder: '$(build.artifactstagingdirectory)\datamodel'
#     flattenFolders: true

# - task: CopyFiles@2
#   displayName: Copy provisioning scripts
#   inputs:
#     SourceFolder: acme.product.api.provisioning
#     TargetFolder: '$(build.artifactstagingdirectory)/iac'

# - task: PublishBuildArtifacts@1
#   displayName: Publish infrastructure artifacts
#   inputs:
#     PathtoPublish: '$(build.artifactstagingdirectory)/iac'
#     ArtifactName: iac


# - task: PublishBuildArtifacts@1
#   displayName: 'publish .net core artifacts'
#   inputs:
#     PathtoPublish: '$(build.artifactstagingdirectory)'
